package LeetCodePractice.Arrays;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MinimumLoss {
	
    public int minimumLoss(List<Long> price) {
    	
    	// Create a temporary map to store all the prices value and its related index
    	Map<Long, Integer> priceMap = new HashMap<>();
    	for(int i=0; i<price.size(); i++)
    	{
    		priceMap.put(price.get(i), i);
    	}
    	
    	// Initialize minimum loss with a max value 
    	long min_loss = Long.MAX_VALUE;
    	
    	// Sort prices list
    	Collections.sort(price);
    	
    	// Loop through sorted price list
    	for(int i=price.size()-1; i>0; i--)
    	{
    		// Check is current price index is more than than the previous price, then continue as its invalid case because we need to buy before we sell 
    		if(priceMap.get(price.get(i)) > priceMap.get(price.get(i-1)))
    		{
    			continue;
    		}
    		
    		// Calculate the current loss and take it as minimum if less the current minimum
    		long curr_loss = price.get(i) - price.get(i-1);
    		min_loss = Math.min(min_loss, curr_loss);
    	}
    	
    	return (int) min_loss;
    }
    
    
    
    
    public static void main(String[] args) {
		
    	Long[] arr = {855281517L, 196961604L,785972507L,837186834L,642804656L,640862982L,167523738L,478709279L,167497845L,107347254L,62366803L,493114739L,930049558L,358316894L,645442329L,153402074L,760287142L,698886177L,22102438L,60571470L,775240278L,893828475L,227997386L,836193L,195233072L,196929094L,663015721L,326677619L,656757583L,563452934L,7587392L,463797435L,24763095L,312704909L,563472503L,656972047L,429347456L,149780395L,50106880L,313687927L,393378036L,249936324L,489701424L,97287920L,843076268L,663986928L,214398093L,410665435L,552155022L,636100304L,501182847L,49875745L,923353978L,652346317L,730474658L,183098886L,483719891L,69848618L,14243141L,604826116L,868010045L,413837823L,327076547L,17143639L,104874638L,247920353L,734689621L,258799127L,472610140L,733648623L,131037554L,654978923L,531692160L,894636226L,36924396L,186148873L,976375348L,419898133L,277862889L,195674509L,711377882L,811063137L,334697217L,456507648L,558418786L,223275662L,587025691L,609563585L,198485966L,33622392L,904396389L,832292535L,482919819L,424289331L,960813552L,994992377L,641990212L,780902360L,989854924L,350620484L,95018098L,612509556L,210434998L,559241535L,48562431L,349320778L,906811318L,417339060L,802428860L,291358805L,579490012L,889850126L,630019270L,383060967L,301651135L,651798063L,582715487L,296351868L,151316235L,318121256L,861352452L,177454028L,80048145L,16789463L,454623875L,829191510L,424000801L,213369339L,315130530L,5929334L,15118096L,875595043L,213505405L,758982293L,763797602L,782765481L,848444521L,828145225L,650644575L,79504834L,994607995L,384899642L,699088639L,124413451L,982430471L,926750242L,912721971L,669261266L,482593987L,355299049L,102445833L,68245260L,398163070L,333914726L,718162832L,349162934L,715028682L,783408665L,634901163L,684572122L,294980278L,952637431L,602630537L,507036913L,411164601L,128413338L,765840756L,911514273L,816886721L,774951170L,602666807L,253386878L,827819712L,274951268L,530208986L,43415239L,561280099L,763068468L,459068676L,119068119L,27293579L,471733983L,115847540L,216594349L,33746832L,961818840L,683340474L,510424893L,337537165L,604812544L,546073624L,746804705L,974492088L,149606010L,267675494L,648988218L,440645308L,579649956L,811266859L,218035336L,245670153L,82656552L,643026898L,311118255L,746019645L,173110038L,945395143L,998255249L,670395051L,867712652L,317434256L,680112111L,113273598L,935723682L,490200263L,862936327L,234548635L,200328075L,447224149L,958377928L,948414960L,579114323L,348262816L,866982271L,131090942L,962170711L,382571895L,341453626L,973699632L,118167353L,292199777L,244743519L,695451975L,458603504L,558751L,878336669L,378567924L,924202427L,327256385L,7464794L,176797874L,548410738L,573474151L,448191651L,520582224L,238486442L,743497529L,128704461L,289279291L,362511531L,262127782L,180701135L,347036510L,234896296L,557047192L,599257462L,754860859L,433615789L,390444317L,69677520L,272639599L,265081155L,270349184L,747651018L,533916513L,764794721L,323065629L,159007130L,305845149L,39607061L,286453935L,654514717L,539747489L,441347639L,55274894L,35487958L,299194362L,370517432L,975243065L,681129569L,257227621L,730901920L,155579681L,570086670L,525545899L,480803511L,593664434L,259904872L,636403262L,721700049L,86815598L,817782835L,396913454L,255161375L,260017253L,781916352L,862364746L,394904134L,504981458L,678933213L,680247346L,428234486L,575283683L,876637056L,96947900L,857216548L,896899225L,161831731L,344434975L,545674287L,200272722L,747123316L,43781976L,921655745L,634466469L,349995711L,727529199L,236482025L,17811045L,763590999L,549855729L,869195136L,243197989L,374377253L,692749016L,103268786L,187224525L,741888745L,426889706L,415253920L,555931274L,899484378L,147661985L,725516739L,366217207L,789432303L,121841271L,224488941L,992882214L,581375336L,942035960L,747092811L,276962713L,245403714L,708652479L,187856420L,877485655L,596142335L,554733565L,568707983L,280063197L,259686913L,99968332L,963378083L,599463026L,966816522L,947723560L,679787519L,202622718L,364030467L,299435835L,374960921L,752003493L,779488972L,909095476L,963264801L,919471205L,952501798L,434337294L,837384990L,953235881L,689376230L,913677469L,90344595L,173547506L,843253097L};
    	
    	
    	List<Long> input = new ArrayList<>();
    	input = Arrays.asList(arr);
    	
    	MinimumLoss minimumLoss = new MinimumLoss();
    	System.out.println("Minimum loss of "+minimumLoss.minimumLoss(input)+" can be attained");
	}

}
